{"version":3,"file":"static/js/953.feeec949.chunk.js","mappings":"oOA8EA,UAzEkB,WAChB,OAA0CA,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEA,GAAkCF,EAAAA,EAAAA,UAAS,MAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAaJ,EAAaK,IAAI,SA6BpC,OArBAC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAkB,mCAAG,sGAEvBX,GAAa,GACbE,EAAS,MAHc,SAIAU,EAAAA,EAAAA,IAAA,qDACyBJ,IALzB,gBAIfK,EAJe,EAIfA,KAIRf,EAAiB,CAACe,IARK,kDAUvBX,EAAS,KAAMY,SAVQ,yBAYvBd,GAAa,GAZU,6EAAH,qDAexBW,GAjBuB,CAkBxB,GAAE,CAACH,KAGF,4BACE,kBAAMO,SA7BW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,cAAcC,SAASC,UAAUH,MACjDb,EAAgB,CAAEiB,MAAOJ,GAC1B,EAyBG,WACE,8BACE,0BAAM,yBACN,kBAAOK,KAAK,OAAOC,KAAK,YAAYC,UAAQ,EAACC,YAAY,OAAQ,QAInE,mBAAQH,KAAK,SAAb,SAAsB,mBAEb,OAAVtB,IAAkB,cAAG0B,UAAU,aAAb,SAA2B1B,IAC7CF,IAAa,SAAC,IAAD,IACK,OAAlBF,GACCA,EAAc+B,KAAI,SAAAC,GAChB,OACE,SAAC,KAAD,CACEC,MAAO,CAAEC,KAAMzB,GAEf0B,GAAE,iBAAYH,EAAKI,IAHrB,UAKE,4BACE,wBAAKJ,EAAKK,SACV,0BAAI,WAASL,EAAKI,OAClB,0BAAOJ,EAAKM,WANTN,EAAKI,GAUf,MAGR,C","sources":["pages/PostsPage.jsx"],"sourcesContent":["import axios from 'axios';\nimport Loader from 'components/Loader/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst PostsPage = () => {\n  const [searchedPosts, setSearchedPosts] = useState(null); // це буде стейт щоб ми зберігали отримані пости\n\n  const [isLoading, setIsLoading] = useState(null); // стейт для індикатора завантаження\n\n  const [error, setError] = useState(null); // стейт для індикатора помилки\n\n  const [searchParams, setSearchParams] = useSearchParams(); // цей хук повертає кортеж, де перше значення це наш обєкт з пошуковим параметрам. Друге значення - це ф-я яка змінює ці параметри\n\n  const location = useLocation();\n\n  const queryValue = searchParams.get('query'); // таким чином ми отримуємо значення нашого пошукового параметра і записуємо його в queryValue\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const value = e.currentTarget.elements.searchKey.value; // отримуємо значення із інпута по сабміту, яке користувач ввів\n    setSearchParams({ query: value }); // записуємо нове значення  в адресн рядок\n  };\n\n  useEffect(() => {\n    if (!queryValue) return;\n\n    const fetchSearchedPosts = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const { data } = await axios.get(\n          `https://jsonplaceholder.typicode.com/posts/${queryValue}`\n        );\n        // ВАМ ПОТРІБНО БУДЕ ПРОСТО ЗРОБИТИ setSearchedPosts(data)\n        setSearchedPosts([data]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchSearchedPosts();\n  }, [queryValue]);\n\n  return (\n    <div>\n      <form onSubmit={onFormSubmit}>\n        <label>\n          <span>Search post by id: </span>\n          <input type=\"text\" name=\"searchKey\" required placeholder=\"12\" />{' '}\n          {/* щоб наша форма розрізняла інпути , треба кожному інпуту додати\n          унікальний ідентифікатор пропс name */}\n        </label>\n        <button type=\"submit\">Search post</button>\n      </form>\n      {error !== null && <p className=\"error-bage\">{error}</p>}\n      {isLoading && <Loader />}\n      {searchedPosts !== null &&\n        searchedPosts.map(post => {\n          return (\n            <Link\n              state={{ from: location }}\n              key={post.id}\n              to={`/posts/${post.id}`}\n            >\n              <div>\n                <h2>{post.title}</h2>\n                <h3>PostId: {post.id}</h3>\n                <code>{post.body}</code>\n              </div>\n            </Link>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default PostsPage;\n"],"names":["useState","searchedPosts","setSearchedPosts","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","queryValue","get","useEffect","fetchSearchedPosts","axios","data","message","onSubmit","e","preventDefault","value","currentTarget","elements","searchKey","query","type","name","required","placeholder","className","map","post","state","from","to","id","title","body"],"sourceRoot":""}