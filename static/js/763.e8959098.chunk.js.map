{"version":3,"file":"static/js/763.e8959098.chunk.js","mappings":"0QAEaA,E,QAAcC,GAAAA,IAAH,0vC,6BCKlBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAwDH,OAxDGA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACJC,MAAQ,CACNC,MAAO,KACPC,SAAU,KACVC,eAAgB,KAEhBC,WAAW,EACXC,MAAO,MAND,EASRC,YAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,sGAET,EAAKC,SAAS,CACZH,WAAW,IAHJ,SAKcI,EAAAA,EAAAA,IACrB,8CANO,gBAKDC,EALC,EAKDA,KAIR,EAAKF,SAAS,CACZN,MAAOQ,IAVA,gDAaT,EAAKF,SAAS,CAAEF,MAAO,KAAMK,UAbpB,yBAeT,EAAKH,SAAS,CACZH,WAAW,IAhBJ,8EAqBbO,mBAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAoB,sGAEhB,EAAKJ,SAAS,CACZH,WAAW,IAHG,SAKOI,EAAAA,EAAAA,IAAA,+DACmC,EAAKR,MAAMG,iBANrD,gBAKRM,EALQ,EAKRA,KAIR,EAAKF,SAAS,CACZL,SAAUO,IAVI,gDAahB,EAAKF,SAAS,CAAEF,MAAO,KAAMK,UAbb,yBAehB,EAAKH,SAAS,CACZH,WAAW,IAhBG,8EAqBpBQ,cAAgB,SAAAC,GACd,EAAKN,SAAS,CACZJ,eAAgBU,GAEnB,IAiEA,OAjEA,yCAED,WACEC,KAAKR,YACN,mCAED,SAAmBS,EAAGC,GAChBA,EAAUb,iBAAmBW,KAAKd,MAAMG,gBAC1CW,KAAKH,mBAER,uBAED,WACE,OACE,UAACd,EAAD,YACE,wBAAI,kBAEkB,OAArBiB,KAAKd,MAAMK,QACV,eAAGY,UAAU,aAAb,UAA0B,8CACoBH,KAAKd,MAAMK,SAG1DS,KAAKd,MAAMI,YAAa,SAACc,EAAA,EAAD,KACzB,iBAAKD,UAAU,cAAf,WACE,eAAIA,UAAU,WAAd,SACwB,OAArBH,KAAKd,MAAMC,OACVa,KAAKd,MAAMC,MAAMkB,KAAI,SAAAC,GACnB,OACE,eAGEH,UAAU,eAHZ,UAKE,UAAC,KAAD,CAAMI,GAAE,iBAAYD,EAAKE,IAAzB,WACE,eAAIL,UAAU,YAAd,SAA2BG,EAAKG,SAChC,eAAGN,UAAU,WAAb,WACE,uBAAG,UAAS,IAAEG,EAAKI,YAPlBJ,EAAKE,GAYf,OAEL,gBAAIL,UAAU,eAAd,UACiC,OAA9BH,KAAKd,MAAMG,iBACV,gBAAIc,UAAU,mBAAd,UAAiC,qBACZH,KAAKd,MAAMG,kBAGT,OAAxBW,KAAKd,MAAME,UACVY,KAAKd,MAAME,SAASiB,KAAI,SAAAM,GACtB,OACE,gBAAqBR,UAAU,mBAA/B,WACE,gBAAIA,UAAU,eAAd,UAA6B,SAAOQ,EAAQC,SAC5C,gBAAIT,UAAU,eAAd,UAA6B,UAAQQ,EAAQE,UAC7C,eAAGV,UAAU,cAAb,WACE,uBAAG,UAAS,IAAEQ,EAAQD,UAJjBC,EAAQH,GAQpB,YAKZ,OAzHGvB,CAAiB6B,EAAAA,WA4HvB,G","sources":["pages/PostsPage.styled.js","pages/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledPosts = styled.div`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 0 15px;\n\n  .loader {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n  }\n\n  .postList {\n    list-style: none;\n    padding: 0;\n    max-width: 450px;\n  }\n  .postListItem {\n    padding: 20px;\n    border: 2px solid black;\n    margin-bottom: 25px;\n    cursor: pointer;\n  }\n  .itemTitle {\n    margin-top: 0;\n    margin-bottom: 15px;\n  }\n  .itemBody {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  .error-bage {\n    padding: 25px;\n    border: 1px solid blue;\n    background-color: orange;\n    margin-bottom: 20px;\n    font-size: 20px;\n  }\n\n  .listWrapper {\n    display: flex;\n    gap: 20px;\n  }\n\n  .commentsList {\n    list-style: none;\n    padding: 0;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    position: sticky;\n    top: 15px;\n    max-height: 100vh;\n    /* overflow: overlay; */\n  }\n\n  .commentsListItem {\n    padding: 20px;\n    border: 2px solid green;\n    margin-bottom: 25px;\n  }\n\n  .commentTitle {\n    margin-top: 0;\n    margin-bottom: 15px;\n  }\n  .commentEmail {\n    margin-top: 0;\n    margin-bottom: 15px;\n  }\n\n  .commentBody {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n`;\n","import axios from 'axios';\nimport React from 'react';\n\nimport { StyledPosts } from './PostsPage.styled';\nimport Loader from 'components/Loader/Loader';\nimport { Link } from 'react-router-dom';\n\nclass HomePage extends React.Component {\n  state = {\n    posts: null,\n    comments: null,\n    selectedPostId: null,\n\n    isLoading: false,\n    error: null,\n  };\n\n  fetchPosts = async () => {\n    try {\n      this.setState({\n        isLoading: true,\n      });\n      const { data } = await axios.get(\n        'https://jsonplaceholder.typicode.com/posts'\n      );\n\n      this.setState({\n        posts: data,\n      });\n    } catch (error) {\n      this.setState({ error: error.message });\n    } finally {\n      this.setState({\n        isLoading: false,\n      });\n    }\n  };\n\n  fetchPostComments = async () => {\n    try {\n      this.setState({\n        isLoading: true,\n      });\n      const { data } = await axios.get(\n        `https://jsonplaceholder.typicode.com/comments?postId=${this.state.selectedPostId}`\n      );\n\n      this.setState({\n        comments: data,\n      });\n    } catch (error) {\n      this.setState({ error: error.message });\n    } finally {\n      this.setState({\n        isLoading: false,\n      });\n    }\n  };\n\n  onSelecPostId = postId => {\n    this.setState({\n      selectedPostId: postId,\n    });\n  };\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.selectedPostId !== this.state.selectedPostId) {\n      this.fetchPostComments();\n    }\n  }\n\n  render() {\n    return (\n      <StyledPosts>\n        <h1>HTTP-requests</h1>\n\n        {this.state.error !== null && (\n          <p className=\"error-bage\">\n            Oops, some error occured... Error message: {this.state.error}\n          </p>\n        )}\n        {this.state.isLoading && <Loader />}\n        <div className=\"listWrapper\">\n          <ul className=\"postList\">\n            {this.state.posts !== null &&\n              this.state.posts.map(post => {\n                return (\n                  <li\n                    key={post.id}\n                    // onClick={() => this.onSelecPostId(post.id)}\n                    className=\"postListItem\"\n                  >\n                    <Link to={`/posts/${post.id}`}>\n                      <h2 className=\"itemTitle\">{post.title}</h2>\n                      <p className=\"itemBody\">\n                        <b>Body:</b> {post.body}\n                      </p>\n                    </Link>\n                  </li>\n                );\n              })}\n          </ul>\n          <ul className=\"commentsList\">\n            {this.state.selectedPostId !== null && (\n              <li className=\"commentsListItem\">\n                Selected post id: {this.state.selectedPostId}\n              </li>\n            )}\n            {this.state.comments !== null &&\n              this.state.comments.map(comment => {\n                return (\n                  <li key={comment.id} className=\"commentsListItem\">\n                    <h2 className=\"commentTitle\">Name: {comment.name}</h2>\n                    <h3 className=\"commentEmail\">Email: {comment.email}</h3>\n                    <p className=\"commentBody\">\n                      <b>Body:</b> {comment.body}\n                    </p>\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      </StyledPosts>\n    );\n  }\n}\n\nexport default HomePage;\n"],"names":["StyledPosts","styled","HomePage","state","posts","comments","selectedPostId","isLoading","error","fetchPosts","setState","axios","data","message","fetchPostComments","onSelecPostId","postId","this","_","prevState","className","Loader","map","post","to","id","title","body","comment","name","email","React"],"sourceRoot":""}